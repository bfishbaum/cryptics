version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cryptics-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cryptics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: cryptics_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - cryptics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cryptics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server
  api:
    build: .
    container_name: cryptics-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cryptics
      DB_USER: postgres
      DB_PASSWORD: cryptics_password
      DB_SSL: "false"
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cryptics-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
    name: cryptics_postgres_data

networks:
  cryptics-network:
    driver: bridge
    name: cryptics-network